const utils = require('./utils');

const DEBUG_OP = {service: '', action: ''};
const _ = require('lodash');

const DEPRECATED = [
  "document",
  "search",
  "mixing",
  "liveChannel",
  "liveChannelSegment",
]

const SwaggerBuilder = module.exports = function() {
  this.swagger = {swagger: '2.0'};
  this.swagger.host = 'www.kaltura.com';
  this.swagger.schemes = ['http', 'https'];
  this.swagger.basePath = '/api_v3';
  this.swagger.info = {title: 'Kaltura', description: 'The Kaltura API'};
  this.swagger.securityDefinitions = {
    "ks": {
      in: 'query',
      name: 'ks',
      type: 'apiKey',
      description: 'A session ID generated by calling /service/session/action/start',
    }
  }
  this.swagger.parameters = {
    format: {
      name: 'format',
      enum: [1, 2, 3],
      'x-enumLabels': ['JSON', 'XML', 'PHP'],
      description: 'The format of the response',
      in: 'query',
      type: 'integer',
      'x-global': true,
    }
  };
}

SwaggerBuilder.prototype.run = function(kaltura) {
  var services = kaltura.services[0].service;
  var enums = kaltura.enums[0].enum;
  var classes = kaltura.classes[0].class;
  this.swagger.info.version = kaltura.$.apiVersion;
  this.addEnums(enums);
  this.addDefinitions(classes);
  this.addPaths(services);
  this.setTags(services);
  this.finish();
  return this.swagger;
}

SwaggerBuilder.prototype.finish = function() {
  this.setInputOptions();
  this.fixFileOperations();
}

SwaggerBuilder.prototype.setTags = function(services) {
  this.swagger.tags = services.map(s => {
    return {name: s.$.name, description: utils.fixMarkdown(s.$.description)}
  })
  .sort(function(t1, t2) {
    return t1.name > t2.name ? 1 : -1;
  })
}

SwaggerBuilder.prototype.addEnums = function(enums) {
  this.swagger['x-enums'] = {};
  enums.forEach(enm => {
    var values = (enm.const || []).map(c => {
      var value = c.$.value;
      if (enm.$.enumType === 'int') value = parseInt(value)
      return {value, name: c.$.name};
    })
    this.swagger['x-enums'][enm.$.name] = {
      title: enm.$.name,
      oneOf: values.map(v => {
        return {
          title: v.name,
          enum: [v.value],
        }
      }),
    }
  })
}

SwaggerBuilder.prototype.addDefinitions = function(classes) {
  this.swagger.definitions = {KalturaObjectBase: {}};
  classes.forEach((cls) => {
    var base = cls.$.base;
    var def = this.swagger.definitions[cls.$.name] = {};
    if (base) def.allOf = [{$ref: '#/definitions/' + base}];
    let descriptionParts = [
      utils.extractPropertiesAsMarkdown(cls),
      utils.fixMarkdown(cls.$.description),
    ];
    def.description = descriptionParts.filter(p => p).join('\n\n') || undefined;
    def.properties = {};
    var props = cls.property || [];
    props.forEach((prop) => {
      var swaggerProp = def.properties[prop.$.name] = {};
      if (prop.$.type.indexOf('Kaltura') === 0) {
        swaggerProp.$ref = '#/definitions/' + prop.$.type;
        return;
      } else if (prop.$.arrayType && prop.$.arrayType.indexOf('Kaltura') === 0) {
        swaggerProp.type = 'array';
        swaggerProp.items = {$ref: '#/definitions/' + prop.$.arrayType};
        return;
      }
      if (prop.$.readOnly && prop.$.readOnly !== '0') {
        swaggerProp.readOnly = true;
      }

      let descriptionParts = [
        utils.extractPropertiesAsMarkdown(prop),
      ];
      swaggerProp.type = utils.convertType(prop.$.type);
      if (prop.$.enumType) {
        descriptionParts.push('Enum Type: `' + prop.$.enumType + '`');
        var enm = this.swagger['x-enums'][prop.$.enumType];
        let enumOptions = utils.getUniqueEnumOptions(enm);
        swaggerProp.enum = enumOptions.map((opt) => {
          return swaggerProp.type === 'integer' ? parseInt(opt.enum[0]) : opt.enum[0];
        });
        swaggerProp['x-enumType'] = prop.$.enumType;
        if (prop.$.enumType !== 'KalturaLanguage') {
          swaggerProp['x-enumLabels'] = enumOptions.map((opt) => {
            return opt.title;
          })
        }
      }
      descriptionParts.push(utils.fixMarkdown(prop.$.description))
      let desc = descriptionParts.filter(p => p).join('\n\n');
      if (desc) swaggerProp.description = desc;
    })
  });
}

SwaggerBuilder.prototype.addPaths = function(services) {
  this.swagger.paths = {};
  var expandedParams = {};
  services.forEach((service) => {
    if (DEPRECATED.indexOf(service.$.name) !== -1) return;
    var actions = service.action;
    actions.forEach((action) => {
      var path = '/service/' + service.$.id + '/action/' + action.$.name;
      console.log('\n\n', path);
      var log = DEBUG_OP.service === service.$.id && DEBUG_OP.action == action.$.name;
      path = this.swagger.paths[path] = {};
      path = path.get = {};
      path.description = utils.fixMarkdown(action.$.description);
      path.tags = [service.$.name];
      path.operationId = service.$.name + '.' + action.$.name;
      if (log) console.log('path', path);
      path.parameters = [{
        $ref: '#/parameters/format',
      }];
      var parameters = action.param || [];
      parameters.forEach((param) => {
        if (param.$.type.indexOf('Kaltura') === 0) {
          var exParams = expandedParams[param.$.type];
          if (!exParams) {
            exParams = expandedParams[param.$.type] = this.getExpandedQueryParameters(param.$.type);
          }
          path['x-parameterGroups'] = path['x-parameterGroups'] || [];
          var group = {
            name: param.$.name,
            description: 'Object Type: `' + param.$.type + '`',
            schema: {$ref: '#/definitions/' + param.$.type},
            subGroups: [],
          };
          var GROUP_REGEX = /(.*)\[[^\]]+\]$/;
          var getGroup = (name, groups) => {
            var groups = groups || path['x-parameterGroups'];
            var group = groups.filter(g => g.name === name)[0];
            if (group) return group;
            return groups.filter(g => g.subGroups).map(g => getGroup(name, g.subGroups)).filter(g => g)[0];
          }
          addGroup = (name) => {
            if (getGroup(name)) return;
            var parentGroup = name.match(GROUP_REGEX)[1];
            parentGroup = getGroup(parentGroup);
            parentGroup.subGroups = parentGroup.subGroups || [];
            parentGroup.subGroups.push({name: name})
          }
          path['x-parameterGroups'].push(group);
          exParams = exParams.map((p) => {
            p = JSON.parse(JSON.stringify(p));
            p.name = param.$.name + p.name;
            var group = p.name.match(/(.*)\[[^\]]+\]$/)[1];
            p['x-group'] = group;
            addGroup(group)
            if (p['x-showCondition']) p['x-showCondition'].name = param.$.name + p['x-showCondition'].name;
            return p;
          });
          path.parameters = path.parameters.concat(exParams);
          if (log) console.log('exparam', exParams);
          return;
        } else if (param.$.type === "array") {
          return;
        }
        var newParam = {
          name: param.$.name,
          in: 'query',
          description: utils.fixMarkdown(param.$.description),
          type: utils.convertType(param.$.type),
          required: param.optional === 1,
        };
        var enm = this.swagger['x-enums'][param.$.enumType];
        if (enm) {
          var msg = 'Enum Type: `' + param.$.enumType + '`';
          newParam.description = msg + (newParam.description ? '\n\n' + newParam.description : '');
          let enumOptions = utils.getUniqueEnumOptions(enm);
          newParam.enum = enumOptions.map(e => e.enum[0]);
          newParam['x-enumLabels'] = enumOptions.map(e => e.title)
          newParam['x-enumType'] = enm.title;
        }
        if (log) console.log('param', newParam);
        path.parameters.push(newParam)
      });
      path.responses = {
        '200': {
          description: 'Success',
        }
      }
      var result = action.result[0];
      if (result) {
        var resultType = result.$.type;
        if (resultType.indexOf('Kaltura') === 0) {
          path.responses['200'].schema = {'$ref': '#/definitions/' + result.$.type}
        }
      }
    });
  });
}

SwaggerBuilder.prototype.getExpandedQueryParameters = function(defName) {
  var getSubclasses = (defName) => {
    var subs = Object.keys(this.swagger.definitions).filter((label) => {
      var def = this.swagger.definitions[label];
      var inherits = (def.allOf || []).filter((i) => {
        return i.$ref === '#/definitions/' + defName;
      })
      return inherits.length;
    });

    var indirSubs = [];
    var addIndirectSubs = (s) => {
      var newSubs = getSubclasses(s).filter((name) => {
        return indirSubs.indexOf(name) === -1 && subs.indexOf(name) === -1;
      });
      indirSubs = indirSubs.concat(newSubs);
      newSubs.forEach(addIndirectSubs);
    }
    subs.forEach(addIndirectSubs);

    return subs.concat(indirSubs);
  }

  var getSuperclasses = (defName) => {
    var def = this.swagger.definitions[defName];
    var supers = (def.allOf || []).map(s => s.$ref.substring('#/definitions/'.length));
    var superSupers = [];
    supers.forEach((s) => {
      var newSupers = getSuperclasses(s).filter(n => superSupers.indexOf(n) === -1);
      superSupers = superSupers.concat(newSupers);
    });
    return superSupers.concat(supers);
  }

  var params = [];
  var addParams = (defName, baseName, cond, skipSuper, skipSub) => {
    baseName = baseName || '';
    if (baseName.split(/\[/).length > 4) return;
    var def = this.swagger.definitions[defName];
    if (!def) throw new Error("Definition " + defName + " not found")

    if (!skipSuper) {
      var superclasses = getSuperclasses(defName);
      superclasses.forEach((sc) => {
        addParams(sc, baseName, cond, true, true);
      })
    }

    var props = def.properties;
    for (var prop in props) {
      var propDef = props[prop];
      if (propDef.readOnly) continue;
      if (propDef.$ref) {
        var subDef = propDef.$ref.match(/definitions\/(.*)$/)[1];
        addParams(subDef, baseName + '[' + prop + ']', cond, false, false)
        return;
      }
      var newParam = {
        type: propDef.type,
        in: 'query',
        name: baseName + '[' + prop + ']',
        enum: propDef.enum,
        'x-enumLabels': propDef['x-enumLabels'],
        'x-enumType': propDef['x-enumType'],
        description: propDef.description,
      };
      if (newParam.type === 'array') continue;
      var oldParam = params.filter(p => p.name === newParam.name)[0];
      if (oldParam) {
        if (oldParam['x-showCondition']) {
          oldParam['x-showCondition'].value = oldParam['x-showCondition'].value.concat(cond.value);
          oldParam['x-showCondition'].value = _.uniq(oldParam['x-showCondition'].value);
        } else {
          oldParam['x-showCondition'] = cond;
        }
      } else {
        if (cond) newParam['x-showCondition'] = cond;
        params.push(newParam);
      }
    }

    if (!skipSub) {
      var subclasses = getSubclasses(defName);
      if (subclasses.length) {
        var paramName = baseName + '[objectType]';
        var existing = params.filter(p => p.name === paramName)[0];
        if (!existing) {
          params.push({
            name: paramName,
            in: 'query',
            enum: subclasses,
            type: 'string',
          });
        } else {
          existing.enum = _.uniq(existing.enum.concat(subclasses));
        }
      }
      subclasses.forEach((subName) => {
        addParams(subName, baseName, {name: paramName, value: [subName]}, true, true);
      })
    }
  }
  addParams(defName);
  return params;
}

SwaggerBuilder.prototype.fixFileOperations = function() {
  for (var path in this.swagger.paths) {
    var op = this.swagger.paths[path].get;
    var fileParams = op.parameters.filter(p => p.type === 'file');
    if (!fileParams.length) continue;
    fileParams.forEach(p => p.in = 'formData');
    this.swagger.paths[path].post = op;
    delete this.swagger.paths[path].get;
  }
}

SwaggerBuilder.prototype.setInputOptions = function() {
  const addDynEnum = (p, name, schema) => {
    var label = schema && 'name' in schema.properties ? 'name' : 'id';
    p['x-dynamicEnum'] = {
      path: '/service/' + name + '/action/list',
      method: 'get',
      array: 'objects',
      label: label,
      value: 'id',
    }
  }

  const adjustParameter = (p, schema, path) => {
    if (p.$ref) return;
    var isGet = path && path.match(/\/get$/);
    if (p.name === 'password') p['x-inputType'] = 'password';
    if (p.name.match(/Date\]?$/)) p['x-inputType'] = 'datetime';
    if (p.name === 'id' && isGet && schema) {
      addDynEnum(p, path.match(/service\/([^\/]*)\//)[1], schema);
      p['x-inputType'] = p.type === 'number' ? 'number' : 'text';
    }
    if (p.name === 'entryId' && isGet) {
      addDynEnum(p, 'media', {properties: {name: {type: 'string'}}});
      p['x-inputType'] = p.type === 'number' ? 'number' : 'text';
    }
    if (path === '/service/session/action/start' && p.name === 'expiry') {
      p.default = 86400;
    }
  }

  for (var path in this.swagger.paths) {
    var op = this.swagger.paths[path].get;
    var schema = op.responses['200'].schema;
    if (schema) schema = this.resolveRef(schema);
    (op.parameters || []).forEach(p => adjustParameter(p, schema, path));
  }
  Object.keys(this.swagger.parameters).map(k => this.swagger.parameters[k]).forEach(p => adjustParameter(p));
}

SwaggerBuilder.prototype.resolveRef = function(schema) {
  var ref = schema.$ref;
  if (!ref) return schema;
  ref = ref.substring('#/definitions/'.length);
  return this.swagger.definitions[ref];
}
